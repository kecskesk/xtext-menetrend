/*
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.menetrend.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MenetrendGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStopsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStopsStopParserRuleCall_1_0 = (RuleCall)cStopsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStopsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStopsStopParserRuleCall_2_1_0 = (RuleCall)cStopsAssignment_2_1.eContents().get(0);
		private final Keyword cSchedulesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSchedulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSchedulesScheduleParserRuleCall_4_0 = (RuleCall)cSchedulesAssignment_4.eContents().get(0);
		
		//Model:
		//	'Stops'
		//	stops+=Stop (',' stops+=Stop)*
		//	'Schedules'
		//	schedules+=Schedule+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Stops' stops+=Stop (',' stops+=Stop)* 'Schedules' schedules+=Schedule+
		public Group getGroup() { return cGroup; }
		
		//'Stops'
		public Keyword getStopsKeyword_0() { return cStopsKeyword_0; }
		
		//stops+=Stop
		public Assignment getStopsAssignment_1() { return cStopsAssignment_1; }
		
		//Stop
		public RuleCall getStopsStopParserRuleCall_1_0() { return cStopsStopParserRuleCall_1_0; }
		
		//(',' stops+=Stop)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//stops+=Stop
		public Assignment getStopsAssignment_2_1() { return cStopsAssignment_2_1; }
		
		//Stop
		public RuleCall getStopsStopParserRuleCall_2_1_0() { return cStopsStopParserRuleCall_2_1_0; }
		
		//'Schedules'
		public Keyword getSchedulesKeyword_3() { return cSchedulesKeyword_3; }
		
		//schedules+=Schedule+
		public Assignment getSchedulesAssignment_4() { return cSchedulesAssignment_4; }
		
		//Schedule
		public RuleCall getSchedulesScheduleParserRuleCall_4_0() { return cSchedulesScheduleParserRuleCall_4_0; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLineNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineNumberLineNumberParserRuleCall_1_0 = (RuleCall)cLineNumberAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSchedulePartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSchedulePartsSchedulePartParserRuleCall_3_0 = (RuleCall)cSchedulePartsAssignment_3.eContents().get(0);
		
		//Schedule:
		//	'Line' lineNumber=LineNumber ':'
		//	scheduleParts+=SchedulePart+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Line' lineNumber=LineNumber ':' scheduleParts+=SchedulePart+
		public Group getGroup() { return cGroup; }
		
		//'Line'
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }
		
		//lineNumber=LineNumber
		public Assignment getLineNumberAssignment_1() { return cLineNumberAssignment_1; }
		
		//LineNumber
		public RuleCall getLineNumberLineNumberParserRuleCall_1_0() { return cLineNumberLineNumberParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//scheduleParts+=SchedulePart+
		public Assignment getSchedulePartsAssignment_3() { return cSchedulePartsAssignment_3; }
		
		//SchedulePart
		public RuleCall getSchedulePartsSchedulePartParserRuleCall_3_0() { return cSchedulePartsSchedulePartParserRuleCall_3_0; }
	}
	public class LineNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.LineNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTransportTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNumberAlternatives_2_0 = (Alternatives)cNumberAssignment_2.eContents().get(0);
		private final RuleCall cNumberLineNumberIntParserRuleCall_2_0_0 = (RuleCall)cNumberAlternatives_2_0.eContents().get(0);
		private final RuleCall cNumberLineNumberBkvIdLfParserRuleCall_2_0_1 = (RuleCall)cNumberAlternatives_2_0.eContents().get(1);
		private final RuleCall cNumberLineNumberBkvIdLbParserRuleCall_2_0_2 = (RuleCall)cNumberAlternatives_2_0.eContents().get(2);
		
		//LineNumber:
		//	type=TransportType '-' number=(LineNumberInt | LineNumberBkvIdLf | LineNumberBkvIdLb);
		@Override public ParserRule getRule() { return rule; }
		
		//type=TransportType '-' number=(LineNumberInt | LineNumberBkvIdLf | LineNumberBkvIdLb)
		public Group getGroup() { return cGroup; }
		
		//type=TransportType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TransportType
		public RuleCall getTypeTransportTypeEnumRuleCall_0_0() { return cTypeTransportTypeEnumRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//number=(LineNumberInt | LineNumberBkvIdLf | LineNumberBkvIdLb)
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//(LineNumberInt | LineNumberBkvIdLf | LineNumberBkvIdLb)
		public Alternatives getNumberAlternatives_2_0() { return cNumberAlternatives_2_0; }
		
		//LineNumberInt
		public RuleCall getNumberLineNumberIntParserRuleCall_2_0_0() { return cNumberLineNumberIntParserRuleCall_2_0_0; }
		
		//LineNumberBkvIdLf
		public RuleCall getNumberLineNumberBkvIdLfParserRuleCall_2_0_1() { return cNumberLineNumberBkvIdLfParserRuleCall_2_0_1; }
		
		//LineNumberBkvIdLb
		public RuleCall getNumberLineNumberBkvIdLbParserRuleCall_2_0_2() { return cNumberLineNumberBkvIdLbParserRuleCall_2_0_2; }
	}
	public class LineNumberIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.LineNumberInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LineNumberInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class LineNumberBkvIdLfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.LineNumberBkvIdLf");
		private final RuleCall cBKV_ID_LFTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LineNumberBkvIdLf:
		//	BKV_ID_LF;
		@Override public ParserRule getRule() { return rule; }
		
		//BKV_ID_LF
		public RuleCall getBKV_ID_LFTerminalRuleCall() { return cBKV_ID_LFTerminalRuleCall; }
	}
	public class LineNumberBkvIdLbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.LineNumberBkvIdLb");
		private final RuleCall cBKV_ID_LBTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LineNumberBkvIdLb:
		//	BKV_ID_LB;
		@Override public ParserRule getRule() { return rule; }
		
		//BKV_ID_LB
		public RuleCall getBKV_ID_LBTerminalRuleCall() { return cBKV_ID_LBTerminalRuleCall; }
	}
	public class SchedulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.SchedulePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelativeScheduleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbsoluteScheduleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SchedulePart:
		//	RelativeSchedule | AbsoluteSchedule;
		@Override public ParserRule getRule() { return rule; }
		
		//RelativeSchedule | AbsoluteSchedule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelativeSchedule
		public RuleCall getRelativeScheduleParserRuleCall_0() { return cRelativeScheduleParserRuleCall_0; }
		
		//AbsoluteSchedule
		public RuleCall getAbsoluteScheduleParserRuleCall_1() { return cAbsoluteScheduleParserRuleCall_1; }
	}
	public class RelativeScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.RelativeSchedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStartStopCrossReference_0_0 = (CrossReference)cStartAssignment_0.eContents().get(0);
		private final RuleCall cStartStopSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cStartStopCrossReference_0_0.eContents().get(1);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetsRelativeTargetParserRuleCall_1_0 = (RuleCall)cTargetsAssignment_1.eContents().get(0);
		
		//RelativeSchedule:
		//	start=[Stop|STRING] targets+=RelativeTarget+;
		@Override public ParserRule getRule() { return rule; }
		
		//start=[Stop|STRING] targets+=RelativeTarget+
		public Group getGroup() { return cGroup; }
		
		//start=[Stop|STRING]
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//[Stop|STRING]
		public CrossReference getStartStopCrossReference_0_0() { return cStartStopCrossReference_0_0; }
		
		//STRING
		public RuleCall getStartStopSTRINGTerminalRuleCall_0_0_1() { return cStartStopSTRINGTerminalRuleCall_0_0_1; }
		
		//targets+=RelativeTarget+
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }
		
		//RelativeTarget
		public RuleCall getTargetsRelativeTargetParserRuleCall_1_0() { return cTargetsRelativeTargetParserRuleCall_1_0; }
	}
	public class RelativeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.RelativeTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStopCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStopSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cTargetStopCrossReference_3_0.eContents().get(1);
		
		//RelativeTarget:
		//	'-[' length=INT ']->' target=[Stop|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//'-[' length=INT ']->' target=[Stop|STRING]
		public Group getGroup() { return cGroup; }
		
		//'-['
		public Keyword getHyphenMinusLeftSquareBracketKeyword_0() { return cHyphenMinusLeftSquareBracketKeyword_0; }
		
		//length=INT
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }
		
		//']->'
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[Stop|STRING]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[Stop|STRING]
		public CrossReference getTargetStopCrossReference_3_0() { return cTargetStopCrossReference_3_0; }
		
		//STRING
		public RuleCall getTargetStopSTRINGTerminalRuleCall_3_0_1() { return cTargetStopSTRINGTerminalRuleCall_3_0_1; }
	}
	public class AbsoluteScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.AbsoluteSchedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDaytypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDaytypeDayTypeEnumRuleCall_0_0 = (RuleCall)cDaytypeAssignment_0.eContents().get(0);
		private final Assignment cDeparturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeparturesDepartureParserRuleCall_1_0 = (RuleCall)cDeparturesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cDeparturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeparturesDepartureParserRuleCall_2_1_0 = (RuleCall)cDeparturesAssignment_2_1.eContents().get(0);
		
		//AbsoluteSchedule:
		//	daytype=DayType departures+=Departure ((',' | '...') departures+=Departure)*;
		@Override public ParserRule getRule() { return rule; }
		
		//daytype=DayType departures+=Departure ((',' | '...') departures+=Departure)*
		public Group getGroup() { return cGroup; }
		
		//daytype=DayType
		public Assignment getDaytypeAssignment_0() { return cDaytypeAssignment_0; }
		
		//DayType
		public RuleCall getDaytypeDayTypeEnumRuleCall_0_0() { return cDaytypeDayTypeEnumRuleCall_0_0; }
		
		//departures+=Departure
		public Assignment getDeparturesAssignment_1() { return cDeparturesAssignment_1; }
		
		//Departure
		public RuleCall getDeparturesDepartureParserRuleCall_1_0() { return cDeparturesDepartureParserRuleCall_1_0; }
		
		//((',' | '...') departures+=Departure)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(',' | '...')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_2_0_1() { return cFullStopFullStopFullStopKeyword_2_0_1; }
		
		//departures+=Departure
		public Assignment getDeparturesAssignment_2_1() { return cDeparturesAssignment_2_1; }
		
		//Departure
		public RuleCall getDeparturesDepartureParserRuleCall_2_1_0() { return cDeparturesDepartureParserRuleCall_2_1_0; }
	}
	public class DepartureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.Departure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTimeFormatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTimeMiddleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComplexTimeEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Departure:
		//	SimpleTimeFormat | ComplexTimeMiddle | ComplexTimeEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleTimeFormat | ComplexTimeMiddle | ComplexTimeEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleTimeFormat
		public RuleCall getSimpleTimeFormatParserRuleCall_0() { return cSimpleTimeFormatParserRuleCall_0; }
		
		//ComplexTimeMiddle
		public RuleCall getComplexTimeMiddleParserRuleCall_1() { return cComplexTimeMiddleParserRuleCall_1; }
		
		//ComplexTimeEnd
		public RuleCall getComplexTimeEndParserRuleCall_2() { return cComplexTimeEndParserRuleCall_2; }
	}
	public class SimpleTimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.SimpleTimeFormat");
		private final Assignment cFromAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFromTIME_FORMATTerminalRuleCall_0 = (RuleCall)cFromAssignment.eContents().get(0);
		
		//SimpleTimeFormat:
		//	from=TIME_FORMAT;
		@Override public ParserRule getRule() { return rule; }
		
		//from=TIME_FORMAT
		public Assignment getFromAssignment() { return cFromAssignment; }
		
		//TIME_FORMAT
		public RuleCall getFromTIME_FORMATTerminalRuleCall_0() { return cFromTIME_FORMATTerminalRuleCall_0; }
	}
	public class ComplexTimeMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.ComplexTimeMiddle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromTIME_FORMATTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUntilAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUntilTIME_FORMATTerminalRuleCall_2_0 = (RuleCall)cUntilAssignment_2.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		
		//ComplexTimeMiddle:
		//	from=TIME_FORMAT '-' until=TIME_FORMAT '/' frequency=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//from=TIME_FORMAT '-' until=TIME_FORMAT '/' frequency=INT
		public Group getGroup() { return cGroup; }
		
		//from=TIME_FORMAT
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//TIME_FORMAT
		public RuleCall getFromTIME_FORMATTerminalRuleCall_0_0() { return cFromTIME_FORMATTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//until=TIME_FORMAT
		public Assignment getUntilAssignment_2() { return cUntilAssignment_2; }
		
		//TIME_FORMAT
		public RuleCall getUntilTIME_FORMATTerminalRuleCall_2_0() { return cUntilTIME_FORMATTerminalRuleCall_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
	}
	public class ComplexTimeEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.ComplexTimeEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromTIME_FORMATTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFrequencyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_2_0 = (RuleCall)cFrequencyAssignment_2.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUntilAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUntilTIME_FORMATTerminalRuleCall_4_0 = (RuleCall)cUntilAssignment_4.eContents().get(0);
		
		//ComplexTimeEnd:
		//	from=TIME_FORMAT '/' frequency=INT '/' until=TIME_FORMAT;
		@Override public ParserRule getRule() { return rule; }
		
		//from=TIME_FORMAT '/' frequency=INT '/' until=TIME_FORMAT
		public Group getGroup() { return cGroup; }
		
		//from=TIME_FORMAT
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//TIME_FORMAT
		public RuleCall getFromTIME_FORMATTerminalRuleCall_0_0() { return cFromTIME_FORMATTerminalRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_2() { return cFrequencyAssignment_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_2_0() { return cFrequencyINTTerminalRuleCall_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//until=TIME_FORMAT
		public Assignment getUntilAssignment_4() { return cUntilAssignment_4; }
		
		//TIME_FORMAT
		public RuleCall getUntilTIME_FORMATTerminalRuleCall_4_0() { return cUntilTIME_FORMATTerminalRuleCall_4_0; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.Stop");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Stop:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	
	public class TransportTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.TransportType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBUSBusKeyword_0_0 = (Keyword)cBUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRAMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRAMTramKeyword_1_0 = (Keyword)cTRAMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMETROEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMETROMetroKeyword_2_0 = (Keyword)cMETROEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTROLIEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTROLITroliKeyword_3_0 = (Keyword)cTROLIEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHEVEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHEVHevKeyword_4_0 = (Keyword)cHEVEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TransportType:
		//	BUS='Bus' | TRAM='Tram' | METRO='Metro' | TROLI='Troli' | HEV='Hev';
		public EnumRule getRule() { return rule; }
		
		//BUS='Bus' | TRAM='Tram' | METRO='Metro' | TROLI='Troli' | HEV='Hev'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BUS='Bus'
		public EnumLiteralDeclaration getBUSEnumLiteralDeclaration_0() { return cBUSEnumLiteralDeclaration_0; }
		
		//'Bus'
		public Keyword getBUSBusKeyword_0_0() { return cBUSBusKeyword_0_0; }
		
		//TRAM='Tram'
		public EnumLiteralDeclaration getTRAMEnumLiteralDeclaration_1() { return cTRAMEnumLiteralDeclaration_1; }
		
		//'Tram'
		public Keyword getTRAMTramKeyword_1_0() { return cTRAMTramKeyword_1_0; }
		
		//METRO='Metro'
		public EnumLiteralDeclaration getMETROEnumLiteralDeclaration_2() { return cMETROEnumLiteralDeclaration_2; }
		
		//'Metro'
		public Keyword getMETROMetroKeyword_2_0() { return cMETROMetroKeyword_2_0; }
		
		//TROLI='Troli'
		public EnumLiteralDeclaration getTROLIEnumLiteralDeclaration_3() { return cTROLIEnumLiteralDeclaration_3; }
		
		//'Troli'
		public Keyword getTROLITroliKeyword_3_0() { return cTROLITroliKeyword_3_0; }
		
		//HEV='Hev'
		public EnumLiteralDeclaration getHEVEnumLiteralDeclaration_4() { return cHEVEnumLiteralDeclaration_4; }
		
		//'Hev'
		public Keyword getHEVHevKeyword_4_0() { return cHEVHevKeyword_4_0; }
	}
	public class DayTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.DayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEEKDAYSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEEKDAYSWeekdaysKeyword_0_0 = (Keyword)cWEEKDAYSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKENDSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWEEKENDSWeekendsKeyword_1_0 = (Keyword)cWEEKENDSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMONDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMONDAYMondayKeyword_2_0 = (Keyword)cMONDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTUESDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTUESDAYTuesdayKeyword_3_0 = (Keyword)cTUESDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEDNESDAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEDNESDAYWednesdayKeyword_4_0 = (Keyword)cWEDNESDAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTHURSDAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTHURSDAYThursdayKeyword_5_0 = (Keyword)cTHURSDAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFRIDAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFRIDAYFridayKeyword_6_0 = (Keyword)cFRIDAYEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSATURDAYEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSATURDAYSaturdayKeyword_7_0 = (Keyword)cSATURDAYEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSUNDAYEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSUNDAYSundayKeyword_8_0 = (Keyword)cSUNDAYEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum DayType:
		//	WEEKDAYS='weekdays' | WEEKENDS='weekends' |
		//	MONDAY='monday' | TUESDAY='tuesday' |
		//	WEDNESDAY='wednesday' | THURSDAY='thursday' |
		//	FRIDAY='friday' | SATURDAY='saturday' |
		//	SUNDAY='sunday';
		public EnumRule getRule() { return rule; }
		
		//WEEKDAYS='weekdays' | WEEKENDS='weekends' | MONDAY='monday' | TUESDAY='tuesday' | WEDNESDAY='wednesday' |
		//THURSDAY='thursday' | FRIDAY='friday' | SATURDAY='saturday' | SUNDAY='sunday'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEEKDAYS='weekdays'
		public EnumLiteralDeclaration getWEEKDAYSEnumLiteralDeclaration_0() { return cWEEKDAYSEnumLiteralDeclaration_0; }
		
		//'weekdays'
		public Keyword getWEEKDAYSWeekdaysKeyword_0_0() { return cWEEKDAYSWeekdaysKeyword_0_0; }
		
		//WEEKENDS='weekends'
		public EnumLiteralDeclaration getWEEKENDSEnumLiteralDeclaration_1() { return cWEEKENDSEnumLiteralDeclaration_1; }
		
		//'weekends'
		public Keyword getWEEKENDSWeekendsKeyword_1_0() { return cWEEKENDSWeekendsKeyword_1_0; }
		
		//MONDAY='monday'
		public EnumLiteralDeclaration getMONDAYEnumLiteralDeclaration_2() { return cMONDAYEnumLiteralDeclaration_2; }
		
		//'monday'
		public Keyword getMONDAYMondayKeyword_2_0() { return cMONDAYMondayKeyword_2_0; }
		
		//TUESDAY='tuesday'
		public EnumLiteralDeclaration getTUESDAYEnumLiteralDeclaration_3() { return cTUESDAYEnumLiteralDeclaration_3; }
		
		//'tuesday'
		public Keyword getTUESDAYTuesdayKeyword_3_0() { return cTUESDAYTuesdayKeyword_3_0; }
		
		//WEDNESDAY='wednesday'
		public EnumLiteralDeclaration getWEDNESDAYEnumLiteralDeclaration_4() { return cWEDNESDAYEnumLiteralDeclaration_4; }
		
		//'wednesday'
		public Keyword getWEDNESDAYWednesdayKeyword_4_0() { return cWEDNESDAYWednesdayKeyword_4_0; }
		
		//THURSDAY='thursday'
		public EnumLiteralDeclaration getTHURSDAYEnumLiteralDeclaration_5() { return cTHURSDAYEnumLiteralDeclaration_5; }
		
		//'thursday'
		public Keyword getTHURSDAYThursdayKeyword_5_0() { return cTHURSDAYThursdayKeyword_5_0; }
		
		//FRIDAY='friday'
		public EnumLiteralDeclaration getFRIDAYEnumLiteralDeclaration_6() { return cFRIDAYEnumLiteralDeclaration_6; }
		
		//'friday'
		public Keyword getFRIDAYFridayKeyword_6_0() { return cFRIDAYFridayKeyword_6_0; }
		
		//SATURDAY='saturday'
		public EnumLiteralDeclaration getSATURDAYEnumLiteralDeclaration_7() { return cSATURDAYEnumLiteralDeclaration_7; }
		
		//'saturday'
		public Keyword getSATURDAYSaturdayKeyword_7_0() { return cSATURDAYSaturdayKeyword_7_0; }
		
		//SUNDAY='sunday'
		public EnumLiteralDeclaration getSUNDAYEnumLiteralDeclaration_8() { return cSUNDAYEnumLiteralDeclaration_8; }
		
		//'sunday'
		public Keyword getSUNDAYSundayKeyword_8_0() { return cSUNDAYSundayKeyword_8_0; }
	}
	
	private final ModelElements pModel;
	private final ScheduleElements pSchedule;
	private final LineNumberElements pLineNumber;
	private final LineNumberIntElements pLineNumberInt;
	private final LineNumberBkvIdLfElements pLineNumberBkvIdLf;
	private final LineNumberBkvIdLbElements pLineNumberBkvIdLb;
	private final TerminalRule tBKV_ID_LF;
	private final TerminalRule tBKV_ID_LB;
	private final SchedulePartElements pSchedulePart;
	private final RelativeScheduleElements pRelativeSchedule;
	private final RelativeTargetElements pRelativeTarget;
	private final AbsoluteScheduleElements pAbsoluteSchedule;
	private final DepartureElements pDeparture;
	private final SimpleTimeFormatElements pSimpleTimeFormat;
	private final ComplexTimeMiddleElements pComplexTimeMiddle;
	private final ComplexTimeEndElements pComplexTimeEnd;
	private final StopElements pStop;
	private final TerminalRule tDUAL_INT_NOLEADZERO;
	private final TerminalRule tDUAL_INT_LEADZERO;
	private final TerminalRule tDIGIT;
	private final TerminalRule tDIGIT_ONE;
	private final TerminalRule tTIME_FORMAT;
	private final TransportTypeElements eTransportType;
	private final DayTypeElements eDayType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MenetrendGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSchedule = new ScheduleElements();
		this.pLineNumber = new LineNumberElements();
		this.pLineNumberInt = new LineNumberIntElements();
		this.pLineNumberBkvIdLf = new LineNumberBkvIdLfElements();
		this.pLineNumberBkvIdLb = new LineNumberBkvIdLbElements();
		this.tBKV_ID_LF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.BKV_ID_LF");
		this.tBKV_ID_LB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.BKV_ID_LB");
		this.pSchedulePart = new SchedulePartElements();
		this.pRelativeSchedule = new RelativeScheduleElements();
		this.pRelativeTarget = new RelativeTargetElements();
		this.pAbsoluteSchedule = new AbsoluteScheduleElements();
		this.pDeparture = new DepartureElements();
		this.pSimpleTimeFormat = new SimpleTimeFormatElements();
		this.pComplexTimeMiddle = new ComplexTimeMiddleElements();
		this.pComplexTimeEnd = new ComplexTimeEndElements();
		this.pStop = new StopElements();
		this.tDUAL_INT_NOLEADZERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.DUAL_INT_NOLEADZERO");
		this.tDUAL_INT_LEADZERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.DUAL_INT_LEADZERO");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.DIGIT");
		this.tDIGIT_ONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.DIGIT_ONE");
		this.tTIME_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
		this.eTransportType = new TransportTypeElements();
		this.eDayType = new DayTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.menetrend.Menetrend".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Stops'
	//	stops+=Stop (',' stops+=Stop)*
	//	'Schedules'
	//	schedules+=Schedule+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Schedule:
	//	'Line' lineNumber=LineNumber ':'
	//	scheduleParts+=SchedulePart+;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//LineNumber:
	//	type=TransportType '-' number=(LineNumberInt | LineNumberBkvIdLf | LineNumberBkvIdLb);
	public LineNumberElements getLineNumberAccess() {
		return pLineNumber;
	}
	
	public ParserRule getLineNumberRule() {
		return getLineNumberAccess().getRule();
	}
	
	//LineNumberInt:
	//	INT;
	public LineNumberIntElements getLineNumberIntAccess() {
		return pLineNumberInt;
	}
	
	public ParserRule getLineNumberIntRule() {
		return getLineNumberIntAccess().getRule();
	}
	
	//LineNumberBkvIdLf:
	//	BKV_ID_LF;
	public LineNumberBkvIdLfElements getLineNumberBkvIdLfAccess() {
		return pLineNumberBkvIdLf;
	}
	
	public ParserRule getLineNumberBkvIdLfRule() {
		return getLineNumberBkvIdLfAccess().getRule();
	}
	
	//LineNumberBkvIdLb:
	//	BKV_ID_LB;
	public LineNumberBkvIdLbElements getLineNumberBkvIdLbAccess() {
		return pLineNumberBkvIdLb;
	}
	
	public ParserRule getLineNumberBkvIdLbRule() {
		return getLineNumberBkvIdLbAccess().getRule();
	}
	
	//terminal BKV_ID_LF:
	//	'A'..'Z' INT 'A'..'Z'?;
	public TerminalRule getBKV_ID_LFRule() {
		return tBKV_ID_LF;
	}
	
	//terminal BKV_ID_LB:
	//	'A'..'Z'? INT 'A'..'Z';
	public TerminalRule getBKV_ID_LBRule() {
		return tBKV_ID_LB;
	}
	
	//SchedulePart:
	//	RelativeSchedule | AbsoluteSchedule;
	public SchedulePartElements getSchedulePartAccess() {
		return pSchedulePart;
	}
	
	public ParserRule getSchedulePartRule() {
		return getSchedulePartAccess().getRule();
	}
	
	//RelativeSchedule:
	//	start=[Stop|STRING] targets+=RelativeTarget+;
	public RelativeScheduleElements getRelativeScheduleAccess() {
		return pRelativeSchedule;
	}
	
	public ParserRule getRelativeScheduleRule() {
		return getRelativeScheduleAccess().getRule();
	}
	
	//RelativeTarget:
	//	'-[' length=INT ']->' target=[Stop|STRING];
	public RelativeTargetElements getRelativeTargetAccess() {
		return pRelativeTarget;
	}
	
	public ParserRule getRelativeTargetRule() {
		return getRelativeTargetAccess().getRule();
	}
	
	//AbsoluteSchedule:
	//	daytype=DayType departures+=Departure ((',' | '...') departures+=Departure)*;
	public AbsoluteScheduleElements getAbsoluteScheduleAccess() {
		return pAbsoluteSchedule;
	}
	
	public ParserRule getAbsoluteScheduleRule() {
		return getAbsoluteScheduleAccess().getRule();
	}
	
	//Departure:
	//	SimpleTimeFormat | ComplexTimeMiddle | ComplexTimeEnd;
	public DepartureElements getDepartureAccess() {
		return pDeparture;
	}
	
	public ParserRule getDepartureRule() {
		return getDepartureAccess().getRule();
	}
	
	//SimpleTimeFormat:
	//	from=TIME_FORMAT;
	public SimpleTimeFormatElements getSimpleTimeFormatAccess() {
		return pSimpleTimeFormat;
	}
	
	public ParserRule getSimpleTimeFormatRule() {
		return getSimpleTimeFormatAccess().getRule();
	}
	
	//ComplexTimeMiddle:
	//	from=TIME_FORMAT '-' until=TIME_FORMAT '/' frequency=INT;
	public ComplexTimeMiddleElements getComplexTimeMiddleAccess() {
		return pComplexTimeMiddle;
	}
	
	public ParserRule getComplexTimeMiddleRule() {
		return getComplexTimeMiddleAccess().getRule();
	}
	
	//ComplexTimeEnd:
	//	from=TIME_FORMAT '/' frequency=INT '/' until=TIME_FORMAT;
	public ComplexTimeEndElements getComplexTimeEndAccess() {
		return pComplexTimeEnd;
	}
	
	public ParserRule getComplexTimeEndRule() {
		return getComplexTimeEndAccess().getRule();
	}
	
	//Stop:
	//	name=STRING;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//terminal fragment DUAL_INT_NOLEADZERO:
	//	DIGIT_ONE DIGIT?;
	public TerminalRule getDUAL_INT_NOLEADZERORule() {
		return tDUAL_INT_NOLEADZERO;
	}
	
	//terminal fragment DUAL_INT_LEADZERO:
	//	DIGIT DIGIT?;
	public TerminalRule getDUAL_INT_LEADZERORule() {
		return tDUAL_INT_LEADZERO;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment DIGIT_ONE:
	//	'1'..'9';
	public TerminalRule getDIGIT_ONERule() {
		return tDIGIT_ONE;
	}
	
	//terminal TIME_FORMAT:
	//	DUAL_INT_NOLEADZERO ':' DUAL_INT_LEADZERO;
	public TerminalRule getTIME_FORMATRule() {
		return tTIME_FORMAT;
	}
	
	//enum TransportType:
	//	BUS='Bus' | TRAM='Tram' | METRO='Metro' | TROLI='Troli' | HEV='Hev';
	public TransportTypeElements getTransportTypeAccess() {
		return eTransportType;
	}
	
	public EnumRule getTransportTypeRule() {
		return getTransportTypeAccess().getRule();
	}
	
	//enum DayType:
	//	WEEKDAYS='weekdays' | WEEKENDS='weekends' |
	//	MONDAY='monday' | TUESDAY='tuesday' |
	//	WEDNESDAY='wednesday' | THURSDAY='thursday' |
	//	FRIDAY='friday' | SATURDAY='saturday' |
	//	SUNDAY='sunday';
	public DayTypeElements getDayTypeAccess() {
		return eDayType;
	}
	
	public EnumRule getDayTypeRule() {
		return getDayTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
