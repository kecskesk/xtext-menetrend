/**
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.menetrend.menetrend.impl;

import hu.bme.aut.menetrend.menetrend.AbsoluteSchedule;
import hu.bme.aut.menetrend.menetrend.DayType;
import hu.bme.aut.menetrend.menetrend.Departure;
import hu.bme.aut.menetrend.menetrend.MenetrendPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Absolute Schedule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.aut.menetrend.menetrend.impl.AbsoluteScheduleImpl#getDaytype <em>Daytype</em>}</li>
 *   <li>{@link hu.bme.aut.menetrend.menetrend.impl.AbsoluteScheduleImpl#getDepartures <em>Departures</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbsoluteScheduleImpl extends SchedulePartImpl implements AbsoluteSchedule
{
  /**
   * The default value of the '{@link #getDaytype() <em>Daytype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDaytype()
   * @generated
   * @ordered
   */
  protected static final DayType DAYTYPE_EDEFAULT = DayType.WEEKDAYS;

  /**
   * The cached value of the '{@link #getDaytype() <em>Daytype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDaytype()
   * @generated
   * @ordered
   */
  protected DayType daytype = DAYTYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getDepartures() <em>Departures</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepartures()
   * @generated
   * @ordered
   */
  protected EList<Departure> departures;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbsoluteScheduleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MenetrendPackage.Literals.ABSOLUTE_SCHEDULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DayType getDaytype()
  {
    return daytype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDaytype(DayType newDaytype)
  {
    DayType oldDaytype = daytype;
    daytype = newDaytype == null ? DAYTYPE_EDEFAULT : newDaytype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MenetrendPackage.ABSOLUTE_SCHEDULE__DAYTYPE, oldDaytype, daytype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Departure> getDepartures()
  {
    if (departures == null)
    {
      departures = new EObjectContainmentEList<Departure>(Departure.class, this, MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES);
    }
    return departures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES:
        return ((InternalEList<?>)getDepartures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DAYTYPE:
        return getDaytype();
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES:
        return getDepartures();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DAYTYPE:
        setDaytype((DayType)newValue);
        return;
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES:
        getDepartures().clear();
        getDepartures().addAll((Collection<? extends Departure>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DAYTYPE:
        setDaytype(DAYTYPE_EDEFAULT);
        return;
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES:
        getDepartures().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DAYTYPE:
        return daytype != DAYTYPE_EDEFAULT;
      case MenetrendPackage.ABSOLUTE_SCHEDULE__DEPARTURES:
        return departures != null && !departures.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (daytype: ");
    result.append(daytype);
    result.append(')');
    return result.toString();
  }

} //AbsoluteScheduleImpl
