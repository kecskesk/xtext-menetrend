/**
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.menetrend.menetrend.impl;

import hu.bme.aut.menetrend.menetrend.LineNumber;
import hu.bme.aut.menetrend.menetrend.MenetrendPackage;
import hu.bme.aut.menetrend.menetrend.Schedule;
import hu.bme.aut.menetrend.menetrend.SchedulePart;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Schedule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.aut.menetrend.menetrend.impl.ScheduleImpl#getLineNumber <em>Line Number</em>}</li>
 *   <li>{@link hu.bme.aut.menetrend.menetrend.impl.ScheduleImpl#getScheduleParts <em>Schedule Parts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScheduleImpl extends MinimalEObjectImpl.Container implements Schedule
{
  /**
   * The cached value of the '{@link #getLineNumber() <em>Line Number</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLineNumber()
   * @generated
   * @ordered
   */
  protected LineNumber lineNumber;

  /**
   * The cached value of the '{@link #getScheduleParts() <em>Schedule Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduleParts()
   * @generated
   * @ordered
   */
  protected EList<SchedulePart> scheduleParts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScheduleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MenetrendPackage.Literals.SCHEDULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LineNumber getLineNumber()
  {
    return lineNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLineNumber(LineNumber newLineNumber, NotificationChain msgs)
  {
    LineNumber oldLineNumber = lineNumber;
    lineNumber = newLineNumber;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MenetrendPackage.SCHEDULE__LINE_NUMBER, oldLineNumber, newLineNumber);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLineNumber(LineNumber newLineNumber)
  {
    if (newLineNumber != lineNumber)
    {
      NotificationChain msgs = null;
      if (lineNumber != null)
        msgs = ((InternalEObject)lineNumber).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MenetrendPackage.SCHEDULE__LINE_NUMBER, null, msgs);
      if (newLineNumber != null)
        msgs = ((InternalEObject)newLineNumber).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MenetrendPackage.SCHEDULE__LINE_NUMBER, null, msgs);
      msgs = basicSetLineNumber(newLineNumber, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MenetrendPackage.SCHEDULE__LINE_NUMBER, newLineNumber, newLineNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SchedulePart> getScheduleParts()
  {
    if (scheduleParts == null)
    {
      scheduleParts = new EObjectContainmentEList<SchedulePart>(SchedulePart.class, this, MenetrendPackage.SCHEDULE__SCHEDULE_PARTS);
    }
    return scheduleParts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MenetrendPackage.SCHEDULE__LINE_NUMBER:
        return basicSetLineNumber(null, msgs);
      case MenetrendPackage.SCHEDULE__SCHEDULE_PARTS:
        return ((InternalEList<?>)getScheduleParts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MenetrendPackage.SCHEDULE__LINE_NUMBER:
        return getLineNumber();
      case MenetrendPackage.SCHEDULE__SCHEDULE_PARTS:
        return getScheduleParts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MenetrendPackage.SCHEDULE__LINE_NUMBER:
        setLineNumber((LineNumber)newValue);
        return;
      case MenetrendPackage.SCHEDULE__SCHEDULE_PARTS:
        getScheduleParts().clear();
        getScheduleParts().addAll((Collection<? extends SchedulePart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MenetrendPackage.SCHEDULE__LINE_NUMBER:
        setLineNumber((LineNumber)null);
        return;
      case MenetrendPackage.SCHEDULE__SCHEDULE_PARTS:
        getScheduleParts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MenetrendPackage.SCHEDULE__LINE_NUMBER:
        return lineNumber != null;
      case MenetrendPackage.SCHEDULE__SCHEDULE_PARTS:
        return scheduleParts != null && !scheduleParts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ScheduleImpl
