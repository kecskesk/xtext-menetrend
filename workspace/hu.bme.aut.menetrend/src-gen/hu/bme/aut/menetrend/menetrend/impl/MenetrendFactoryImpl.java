/**
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.menetrend.menetrend.impl;

import hu.bme.aut.menetrend.menetrend.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MenetrendFactoryImpl extends EFactoryImpl implements MenetrendFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MenetrendFactory init()
  {
    try
    {
      MenetrendFactory theMenetrendFactory = (MenetrendFactory)EPackage.Registry.INSTANCE.getEFactory(MenetrendPackage.eNS_URI);
      if (theMenetrendFactory != null)
      {
        return theMenetrendFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MenetrendFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MenetrendFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MenetrendPackage.MODEL: return createModel();
      case MenetrendPackage.SCHEDULE: return createSchedule();
      case MenetrendPackage.LINE_NUMBER: return createLineNumber();
      case MenetrendPackage.SCHEDULE_PART: return createSchedulePart();
      case MenetrendPackage.RELATIVE_SCHEDULE: return createRelativeSchedule();
      case MenetrendPackage.RELATIVE_TARGET: return createRelativeTarget();
      case MenetrendPackage.ABSOLUTE_SCHEDULE: return createAbsoluteSchedule();
      case MenetrendPackage.DEPARTURE: return createDeparture();
      case MenetrendPackage.SIMPLE_TIME_FORMAT: return createSimpleTimeFormat();
      case MenetrendPackage.COMPLEX_TIME_MIDDLE: return createComplexTimeMiddle();
      case MenetrendPackage.COMPLEX_TIME_END: return createComplexTimeEnd();
      case MenetrendPackage.STOP: return createStop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MenetrendPackage.TRANSPORT_TYPE:
        return createTransportTypeFromString(eDataType, initialValue);
      case MenetrendPackage.DAY_TYPE:
        return createDayTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MenetrendPackage.TRANSPORT_TYPE:
        return convertTransportTypeToString(eDataType, instanceValue);
      case MenetrendPackage.DAY_TYPE:
        return convertDayTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schedule createSchedule()
  {
    ScheduleImpl schedule = new ScheduleImpl();
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LineNumber createLineNumber()
  {
    LineNumberImpl lineNumber = new LineNumberImpl();
    return lineNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchedulePart createSchedulePart()
  {
    SchedulePartImpl schedulePart = new SchedulePartImpl();
    return schedulePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativeSchedule createRelativeSchedule()
  {
    RelativeScheduleImpl relativeSchedule = new RelativeScheduleImpl();
    return relativeSchedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativeTarget createRelativeTarget()
  {
    RelativeTargetImpl relativeTarget = new RelativeTargetImpl();
    return relativeTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbsoluteSchedule createAbsoluteSchedule()
  {
    AbsoluteScheduleImpl absoluteSchedule = new AbsoluteScheduleImpl();
    return absoluteSchedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Departure createDeparture()
  {
    DepartureImpl departure = new DepartureImpl();
    return departure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleTimeFormat createSimpleTimeFormat()
  {
    SimpleTimeFormatImpl simpleTimeFormat = new SimpleTimeFormatImpl();
    return simpleTimeFormat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexTimeMiddle createComplexTimeMiddle()
  {
    ComplexTimeMiddleImpl complexTimeMiddle = new ComplexTimeMiddleImpl();
    return complexTimeMiddle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexTimeEnd createComplexTimeEnd()
  {
    ComplexTimeEndImpl complexTimeEnd = new ComplexTimeEndImpl();
    return complexTimeEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stop createStop()
  {
    StopImpl stop = new StopImpl();
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TransportType createTransportTypeFromString(EDataType eDataType, String initialValue)
  {
    TransportType result = TransportType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTransportTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DayType createDayTypeFromString(EDataType eDataType, String initialValue)
  {
    DayType result = DayType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDayTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MenetrendPackage getMenetrendPackage()
  {
    return (MenetrendPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MenetrendPackage getPackage()
  {
    return MenetrendPackage.eINSTANCE;
  }

} //MenetrendFactoryImpl
