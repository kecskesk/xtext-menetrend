/*
 * generated by Xtext 2.10.0
 */
grammar InternalMenetrend;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.aut.menetrend.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.aut.menetrend.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.aut.menetrend.services.MenetrendGrammarAccess;

}

@parser::members {

 	private MenetrendGrammarAccess grammarAccess;

    public InternalMenetrendParser(TokenStream input, MenetrendGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MenetrendGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Stops'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getStopsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStopsStopParserRuleCall_1_0());
				}
				lv_stops_1_0=ruleStop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"stops",
						lv_stops_1_0,
						"hu.bme.aut.menetrend.Menetrend.Stop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getModelAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getStopsStopParserRuleCall_2_1_0());
					}
					lv_stops_3_0=ruleStop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"stops",
							lv_stops_3_0,
							"hu.bme.aut.menetrend.Menetrend.Stop");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='Schedules'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getSchedulesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSchedulesScheduleParserRuleCall_4_0());
				}
				lv_schedules_5_0=ruleSchedule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"schedules",
						lv_schedules_5_0,
						"hu.bme.aut.menetrend.Menetrend.Schedule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	iv_ruleSchedule=ruleSchedule
	{ $current=$iv_ruleSchedule.current; }
	EOF;

// Rule Schedule
ruleSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Line'
		{
			newLeafNode(otherlv_0, grammarAccess.getScheduleAccess().getLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getLineNumberLineNumberParserRuleCall_1_0());
				}
				lv_lineNumber_1_0=ruleLineNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					set(
						$current,
						"lineNumber",
						lv_lineNumber_1_0,
						"hu.bme.aut.menetrend.Menetrend.LineNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getScheduleAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getSchedulePartsSchedulePartParserRuleCall_3_0());
				}
				lv_scheduleParts_3_0=ruleSchedulePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					add(
						$current,
						"scheduleParts",
						lv_scheduleParts_3_0,
						"hu.bme.aut.menetrend.Menetrend.SchedulePart");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleLineNumber
entryRuleLineNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineNumberRule()); }
	iv_ruleLineNumber=ruleLineNumber
	{ $current=$iv_ruleLineNumber.current; }
	EOF;

// Rule LineNumber
ruleLineNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLineNumberAccess().getTypeTransportTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleTransportType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLineNumberRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"hu.bme.aut.menetrend.Menetrend.TransportType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getLineNumberAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLineNumberAccess().getNumberLineNumberIntParserRuleCall_2_0_0());
					}
					lv_number_2_1=ruleLineNumberInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineNumberRule());
						}
						set(
							$current,
							"number",
							lv_number_2_1,
							"hu.bme.aut.menetrend.Menetrend.LineNumberInt");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLfParserRuleCall_2_0_1());
					}
					lv_number_2_2=ruleLineNumberBkvIdLf
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineNumberRule());
						}
						set(
							$current,
							"number",
							lv_number_2_2,
							"hu.bme.aut.menetrend.Menetrend.LineNumberBkvIdLf");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLbParserRuleCall_2_0_2());
					}
					lv_number_2_3=ruleLineNumberBkvIdLb
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineNumberRule());
						}
						set(
							$current,
							"number",
							lv_number_2_3,
							"hu.bme.aut.menetrend.Menetrend.LineNumberBkvIdLb");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLineNumberInt
entryRuleLineNumberInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLineNumberIntRule()); }
	iv_ruleLineNumberInt=ruleLineNumberInt
	{ $current=$iv_ruleLineNumberInt.current.getText(); }
	EOF;

// Rule LineNumberInt
ruleLineNumberInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getLineNumberIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleLineNumberBkvIdLf
entryRuleLineNumberBkvIdLf returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLineNumberBkvIdLfRule()); }
	iv_ruleLineNumberBkvIdLf=ruleLineNumberBkvIdLf
	{ $current=$iv_ruleLineNumberBkvIdLf.current.getText(); }
	EOF;

// Rule LineNumberBkvIdLf
ruleLineNumberBkvIdLf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_BKV_ID_LF_0=RULE_BKV_ID_LF
	{
		$current.merge(this_BKV_ID_LF_0);
	}
	{
		newLeafNode(this_BKV_ID_LF_0, grammarAccess.getLineNumberBkvIdLfAccess().getBKV_ID_LFTerminalRuleCall());
	}
;

// Entry rule entryRuleLineNumberBkvIdLb
entryRuleLineNumberBkvIdLb returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLineNumberBkvIdLbRule()); }
	iv_ruleLineNumberBkvIdLb=ruleLineNumberBkvIdLb
	{ $current=$iv_ruleLineNumberBkvIdLb.current.getText(); }
	EOF;

// Rule LineNumberBkvIdLb
ruleLineNumberBkvIdLb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_BKV_ID_LB_0=RULE_BKV_ID_LB
	{
		$current.merge(this_BKV_ID_LB_0);
	}
	{
		newLeafNode(this_BKV_ID_LB_0, grammarAccess.getLineNumberBkvIdLbAccess().getBKV_ID_LBTerminalRuleCall());
	}
;

// Entry rule entryRuleSchedulePart
entryRuleSchedulePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchedulePartRule()); }
	iv_ruleSchedulePart=ruleSchedulePart
	{ $current=$iv_ruleSchedulePart.current; }
	EOF;

// Rule SchedulePart
ruleSchedulePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSchedulePartAccess().getRelativeScheduleParserRuleCall_0());
		}
		this_RelativeSchedule_0=ruleRelativeSchedule
		{
			$current = $this_RelativeSchedule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchedulePartAccess().getAbsoluteScheduleParserRuleCall_1());
		}
		this_AbsoluteSchedule_1=ruleAbsoluteSchedule
		{
			$current = $this_AbsoluteSchedule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelativeSchedule
entryRuleRelativeSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelativeScheduleRule()); }
	iv_ruleRelativeSchedule=ruleRelativeSchedule
	{ $current=$iv_ruleRelativeSchedule.current; }
	EOF;

// Rule RelativeSchedule
ruleRelativeSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelativeScheduleRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getRelativeScheduleAccess().getStartStopCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelativeScheduleAccess().getTargetsRelativeTargetParserRuleCall_1_0());
				}
				lv_targets_1_0=ruleRelativeTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelativeScheduleRule());
					}
					add(
						$current,
						"targets",
						lv_targets_1_0,
						"hu.bme.aut.menetrend.Menetrend.RelativeTarget");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleRelativeTarget
entryRuleRelativeTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelativeTargetRule()); }
	iv_ruleRelativeTarget=ruleRelativeTarget
	{ $current=$iv_ruleRelativeTarget.current; }
	EOF;

// Rule RelativeTarget
ruleRelativeTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-['
		{
			newLeafNode(otherlv_0, grammarAccess.getRelativeTargetAccess().getHyphenMinusLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_length_1_0=RULE_INT
				{
					newLeafNode(lv_length_1_0, grammarAccess.getRelativeTargetAccess().getLengthINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelativeTargetRule());
					}
					setWithLastConsumed(
						$current,
						"length",
						lv_length_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=']->'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelativeTargetAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelativeTargetRule());
					}
				}
				otherlv_3=RULE_STRING
				{
					newLeafNode(otherlv_3, grammarAccess.getRelativeTargetAccess().getTargetStopCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAbsoluteSchedule
entryRuleAbsoluteSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbsoluteScheduleRule()); }
	iv_ruleAbsoluteSchedule=ruleAbsoluteSchedule
	{ $current=$iv_ruleAbsoluteSchedule.current; }
	EOF;

// Rule AbsoluteSchedule
ruleAbsoluteSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAbsoluteScheduleAccess().getDaytypeDayTypeEnumRuleCall_0_0());
				}
				lv_daytype_0_0=ruleDayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbsoluteScheduleRule());
					}
					set(
						$current,
						"daytype",
						lv_daytype_0_0,
						"hu.bme.aut.menetrend.Menetrend.DayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_1_0());
				}
				lv_departures_1_0=ruleDeparture
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbsoluteScheduleRule());
					}
					add(
						$current,
						"departures",
						lv_departures_1_0,
						"hu.bme.aut.menetrend.Menetrend.Departure");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getAbsoluteScheduleAccess().getCommaKeyword_2_0_0());
				}
				    |
				otherlv_3='...'
				{
					newLeafNode(otherlv_3, grammarAccess.getAbsoluteScheduleAccess().getFullStopFullStopFullStopKeyword_2_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_2_1_0());
					}
					lv_departures_4_0=ruleDeparture
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbsoluteScheduleRule());
						}
						add(
							$current,
							"departures",
							lv_departures_4_0,
							"hu.bme.aut.menetrend.Menetrend.Departure");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDeparture
entryRuleDeparture returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDepartureRule()); }
	iv_ruleDeparture=ruleDeparture
	{ $current=$iv_ruleDeparture.current; }
	EOF;

// Rule Departure
ruleDeparture returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDepartureAccess().getSimpleTimeFormatParserRuleCall_0());
		}
		this_SimpleTimeFormat_0=ruleSimpleTimeFormat
		{
			$current = $this_SimpleTimeFormat_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDepartureAccess().getComplexTimeMiddleParserRuleCall_1());
		}
		this_ComplexTimeMiddle_1=ruleComplexTimeMiddle
		{
			$current = $this_ComplexTimeMiddle_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDepartureAccess().getComplexTimeEndParserRuleCall_2());
		}
		this_ComplexTimeEnd_2=ruleComplexTimeEnd
		{
			$current = $this_ComplexTimeEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleTimeFormat
entryRuleSimpleTimeFormat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTimeFormatRule()); }
	iv_ruleSimpleTimeFormat=ruleSimpleTimeFormat
	{ $current=$iv_ruleSimpleTimeFormat.current; }
	EOF;

// Rule SimpleTimeFormat
ruleSimpleTimeFormat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_from_0_0=RULE_TIME_FORMAT
			{
				newLeafNode(lv_from_0_0, grammarAccess.getSimpleTimeFormatAccess().getFromTIME_FORMATTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSimpleTimeFormatRule());
				}
				setWithLastConsumed(
					$current,
					"from",
					lv_from_0_0,
					"hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
			}
		)
	)
;

// Entry rule entryRuleComplexTimeMiddle
entryRuleComplexTimeMiddle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTimeMiddleRule()); }
	iv_ruleComplexTimeMiddle=ruleComplexTimeMiddle
	{ $current=$iv_ruleComplexTimeMiddle.current; }
	EOF;

// Rule ComplexTimeMiddle
ruleComplexTimeMiddle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_from_0_0=RULE_TIME_FORMAT
				{
					newLeafNode(lv_from_0_0, grammarAccess.getComplexTimeMiddleAccess().getFromTIME_FORMATTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeMiddleRule());
					}
					setWithLastConsumed(
						$current,
						"from",
						lv_from_0_0,
						"hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getComplexTimeMiddleAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_until_2_0=RULE_TIME_FORMAT
				{
					newLeafNode(lv_until_2_0, grammarAccess.getComplexTimeMiddleAccess().getUntilTIME_FORMATTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeMiddleRule());
					}
					setWithLastConsumed(
						$current,
						"until",
						lv_until_2_0,
						"hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
				}
			)
		)
		otherlv_3='/'
		{
			newLeafNode(otherlv_3, grammarAccess.getComplexTimeMiddleAccess().getSolidusKeyword_3());
		}
		(
			(
				lv_frequency_4_0=RULE_INT
				{
					newLeafNode(lv_frequency_4_0, grammarAccess.getComplexTimeMiddleAccess().getFrequencyINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeMiddleRule());
					}
					setWithLastConsumed(
						$current,
						"frequency",
						lv_frequency_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleComplexTimeEnd
entryRuleComplexTimeEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTimeEndRule()); }
	iv_ruleComplexTimeEnd=ruleComplexTimeEnd
	{ $current=$iv_ruleComplexTimeEnd.current; }
	EOF;

// Rule ComplexTimeEnd
ruleComplexTimeEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_from_0_0=RULE_TIME_FORMAT
				{
					newLeafNode(lv_from_0_0, grammarAccess.getComplexTimeEndAccess().getFromTIME_FORMATTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeEndRule());
					}
					setWithLastConsumed(
						$current,
						"from",
						lv_from_0_0,
						"hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
				}
			)
		)
		otherlv_1='/'
		{
			newLeafNode(otherlv_1, grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_1());
		}
		(
			(
				lv_frequency_2_0=RULE_INT
				{
					newLeafNode(lv_frequency_2_0, grammarAccess.getComplexTimeEndAccess().getFrequencyINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeEndRule());
					}
					setWithLastConsumed(
						$current,
						"frequency",
						lv_frequency_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='/'
		{
			newLeafNode(otherlv_3, grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_3());
		}
		(
			(
				lv_until_4_0=RULE_TIME_FORMAT
				{
					newLeafNode(lv_until_4_0, grammarAccess.getComplexTimeEndAccess().getUntilTIME_FORMATTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTimeEndRule());
					}
					setWithLastConsumed(
						$current,
						"until",
						lv_until_4_0,
						"hu.bme.aut.menetrend.Menetrend.TIME_FORMAT");
				}
			)
		)
	)
;

// Entry rule entryRuleStop
entryRuleStop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_ruleStop=ruleStop
	{ $current=$iv_ruleStop.current; }
	EOF;

// Rule Stop
ruleStop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_STRING
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStopAccess().getNameSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStopRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Rule TransportType
ruleTransportType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Bus'
			{
				$current = grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Tram'
			{
				$current = grammarAccess.getTransportTypeAccess().getTRAMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTransportTypeAccess().getTRAMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Metro'
			{
				$current = grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Troli'
			{
				$current = grammarAccess.getTransportTypeAccess().getTROLIEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTransportTypeAccess().getTROLIEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Hev'
			{
				$current = grammarAccess.getTransportTypeAccess().getHEVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTransportTypeAccess().getHEVEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule DayType
ruleDayType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='weekdays'
			{
				$current = grammarAccess.getDayTypeAccess().getWEEKDAYSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDayTypeAccess().getWEEKDAYSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='weekends'
			{
				$current = grammarAccess.getDayTypeAccess().getWEEKENDSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDayTypeAccess().getWEEKENDSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='monday'
			{
				$current = grammarAccess.getDayTypeAccess().getMONDAYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDayTypeAccess().getMONDAYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='tuesday'
			{
				$current = grammarAccess.getDayTypeAccess().getTUESDAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDayTypeAccess().getTUESDAYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='wednesday'
			{
				$current = grammarAccess.getDayTypeAccess().getWEDNESDAYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDayTypeAccess().getWEDNESDAYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='thursday'
			{
				$current = grammarAccess.getDayTypeAccess().getTHURSDAYEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getDayTypeAccess().getTHURSDAYEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='friday'
			{
				$current = grammarAccess.getDayTypeAccess().getFRIDAYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getDayTypeAccess().getFRIDAYEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='saturday'
			{
				$current = grammarAccess.getDayTypeAccess().getSATURDAYEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getDayTypeAccess().getSATURDAYEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='sunday'
			{
				$current = grammarAccess.getDayTypeAccess().getSUNDAYEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getDayTypeAccess().getSUNDAYEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_BKV_ID_LF : 'A'..'Z' RULE_INT ('A'..'Z')?;

RULE_BKV_ID_LB : ('A'..'Z')? RULE_INT 'A'..'Z';

fragment RULE_DUAL_INT_NOLEADZERO : RULE_DIGIT_ONE RULE_DIGIT?;

fragment RULE_DUAL_INT_LEADZERO : RULE_DIGIT RULE_DIGIT?;

fragment RULE_DIGIT : '0'..'9';

fragment RULE_DIGIT_ONE : '1'..'9';

RULE_TIME_FORMAT : RULE_DUAL_INT_NOLEADZERO ':' RULE_DUAL_INT_LEADZERO;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
