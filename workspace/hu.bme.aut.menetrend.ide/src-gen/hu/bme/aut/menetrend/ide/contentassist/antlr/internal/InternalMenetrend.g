/*
 * generated by Xtext 2.10.0
 */
grammar InternalMenetrend;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.aut.menetrend.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.aut.menetrend.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.aut.menetrend.services.MenetrendGrammarAccess;

}
@parser::members {
	private MenetrendGrammarAccess grammarAccess;

	public void setGrammarAccess(MenetrendGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSchedule
entryRuleSchedule
:
{ before(grammarAccess.getScheduleRule()); }
	 ruleSchedule
{ after(grammarAccess.getScheduleRule()); } 
	 EOF 
;

// Rule Schedule
ruleSchedule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScheduleAccess().getGroup()); }
		(rule__Schedule__Group__0)
		{ after(grammarAccess.getScheduleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineNumber
entryRuleLineNumber
:
{ before(grammarAccess.getLineNumberRule()); }
	 ruleLineNumber
{ after(grammarAccess.getLineNumberRule()); } 
	 EOF 
;

// Rule LineNumber
ruleLineNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineNumberAccess().getGroup()); }
		(rule__LineNumber__Group__0)
		{ after(grammarAccess.getLineNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineNumberInt
entryRuleLineNumberInt
:
{ before(grammarAccess.getLineNumberIntRule()); }
	 ruleLineNumberInt
{ after(grammarAccess.getLineNumberIntRule()); } 
	 EOF 
;

// Rule LineNumberInt
ruleLineNumberInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineNumberIntAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getLineNumberIntAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineNumberBkvIdLf
entryRuleLineNumberBkvIdLf
:
{ before(grammarAccess.getLineNumberBkvIdLfRule()); }
	 ruleLineNumberBkvIdLf
{ after(grammarAccess.getLineNumberBkvIdLfRule()); } 
	 EOF 
;

// Rule LineNumberBkvIdLf
ruleLineNumberBkvIdLf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineNumberBkvIdLfAccess().getBKV_ID_LFTerminalRuleCall()); }
		RULE_BKV_ID_LF
		{ after(grammarAccess.getLineNumberBkvIdLfAccess().getBKV_ID_LFTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineNumberBkvIdLb
entryRuleLineNumberBkvIdLb
:
{ before(grammarAccess.getLineNumberBkvIdLbRule()); }
	 ruleLineNumberBkvIdLb
{ after(grammarAccess.getLineNumberBkvIdLbRule()); } 
	 EOF 
;

// Rule LineNumberBkvIdLb
ruleLineNumberBkvIdLb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineNumberBkvIdLbAccess().getBKV_ID_LBTerminalRuleCall()); }
		RULE_BKV_ID_LB
		{ after(grammarAccess.getLineNumberBkvIdLbAccess().getBKV_ID_LBTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSchedulePart
entryRuleSchedulePart
:
{ before(grammarAccess.getSchedulePartRule()); }
	 ruleSchedulePart
{ after(grammarAccess.getSchedulePartRule()); } 
	 EOF 
;

// Rule SchedulePart
ruleSchedulePart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSchedulePartAccess().getAlternatives()); }
		(rule__SchedulePart__Alternatives)
		{ after(grammarAccess.getSchedulePartAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelativeSchedule
entryRuleRelativeSchedule
:
{ before(grammarAccess.getRelativeScheduleRule()); }
	 ruleRelativeSchedule
{ after(grammarAccess.getRelativeScheduleRule()); } 
	 EOF 
;

// Rule RelativeSchedule
ruleRelativeSchedule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativeScheduleAccess().getGroup()); }
		(rule__RelativeSchedule__Group__0)
		{ after(grammarAccess.getRelativeScheduleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelativeTarget
entryRuleRelativeTarget
:
{ before(grammarAccess.getRelativeTargetRule()); }
	 ruleRelativeTarget
{ after(grammarAccess.getRelativeTargetRule()); } 
	 EOF 
;

// Rule RelativeTarget
ruleRelativeTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativeTargetAccess().getGroup()); }
		(rule__RelativeTarget__Group__0)
		{ after(grammarAccess.getRelativeTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbsoluteSchedule
entryRuleAbsoluteSchedule
:
{ before(grammarAccess.getAbsoluteScheduleRule()); }
	 ruleAbsoluteSchedule
{ after(grammarAccess.getAbsoluteScheduleRule()); } 
	 EOF 
;

// Rule AbsoluteSchedule
ruleAbsoluteSchedule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getGroup()); }
		(rule__AbsoluteSchedule__Group__0)
		{ after(grammarAccess.getAbsoluteScheduleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeparture
entryRuleDeparture
:
{ before(grammarAccess.getDepartureRule()); }
	 ruleDeparture
{ after(grammarAccess.getDepartureRule()); } 
	 EOF 
;

// Rule Departure
ruleDeparture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDepartureAccess().getAlternatives()); }
		(rule__Departure__Alternatives)
		{ after(grammarAccess.getDepartureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleTimeFormat
entryRuleSimpleTimeFormat
:
{ before(grammarAccess.getSimpleTimeFormatRule()); }
	 ruleSimpleTimeFormat
{ after(grammarAccess.getSimpleTimeFormatRule()); } 
	 EOF 
;

// Rule SimpleTimeFormat
ruleSimpleTimeFormat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleTimeFormatAccess().getFromAssignment()); }
		(rule__SimpleTimeFormat__FromAssignment)
		{ after(grammarAccess.getSimpleTimeFormatAccess().getFromAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexTimeMiddle
entryRuleComplexTimeMiddle
:
{ before(grammarAccess.getComplexTimeMiddleRule()); }
	 ruleComplexTimeMiddle
{ after(grammarAccess.getComplexTimeMiddleRule()); } 
	 EOF 
;

// Rule ComplexTimeMiddle
ruleComplexTimeMiddle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexTimeMiddleAccess().getGroup()); }
		(rule__ComplexTimeMiddle__Group__0)
		{ after(grammarAccess.getComplexTimeMiddleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexTimeEnd
entryRuleComplexTimeEnd
:
{ before(grammarAccess.getComplexTimeEndRule()); }
	 ruleComplexTimeEnd
{ after(grammarAccess.getComplexTimeEndRule()); } 
	 EOF 
;

// Rule ComplexTimeEnd
ruleComplexTimeEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexTimeEndAccess().getGroup()); }
		(rule__ComplexTimeEnd__Group__0)
		{ after(grammarAccess.getComplexTimeEndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStop
entryRuleStop
:
{ before(grammarAccess.getStopRule()); }
	 ruleStop
{ after(grammarAccess.getStopRule()); } 
	 EOF 
;

// Rule Stop
ruleStop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopAccess().getNameAssignment()); }
		(rule__Stop__NameAssignment)
		{ after(grammarAccess.getStopAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TransportType
ruleTransportType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransportTypeAccess().getAlternatives()); }
		(rule__TransportType__Alternatives)
		{ after(grammarAccess.getTransportTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DayType
ruleDayType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDayTypeAccess().getAlternatives()); }
		(rule__DayType__Alternatives)
		{ after(grammarAccess.getDayTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__NumberAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineNumberAccess().getNumberLineNumberIntParserRuleCall_2_0_0()); }
		ruleLineNumberInt
		{ after(grammarAccess.getLineNumberAccess().getNumberLineNumberIntParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLfParserRuleCall_2_0_1()); }
		ruleLineNumberBkvIdLf
		{ after(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLfParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLbParserRuleCall_2_0_2()); }
		ruleLineNumberBkvIdLb
		{ after(grammarAccess.getLineNumberAccess().getNumberLineNumberBkvIdLbParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchedulePart__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSchedulePartAccess().getRelativeScheduleParserRuleCall_0()); }
		ruleRelativeSchedule
		{ after(grammarAccess.getSchedulePartAccess().getRelativeScheduleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSchedulePartAccess().getAbsoluteScheduleParserRuleCall_1()); }
		ruleAbsoluteSchedule
		{ after(grammarAccess.getSchedulePartAccess().getAbsoluteScheduleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getCommaKeyword_2_0_0()); }
		','
		{ after(grammarAccess.getAbsoluteScheduleAccess().getCommaKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getFullStopFullStopFullStopKeyword_2_0_1()); }
		'...'
		{ after(grammarAccess.getAbsoluteScheduleAccess().getFullStopFullStopFullStopKeyword_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Departure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDepartureAccess().getSimpleTimeFormatParserRuleCall_0()); }
		ruleSimpleTimeFormat
		{ after(grammarAccess.getDepartureAccess().getSimpleTimeFormatParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDepartureAccess().getComplexTimeMiddleParserRuleCall_1()); }
		ruleComplexTimeMiddle
		{ after(grammarAccess.getDepartureAccess().getComplexTimeMiddleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDepartureAccess().getComplexTimeEndParserRuleCall_2()); }
		ruleComplexTimeEnd
		{ after(grammarAccess.getDepartureAccess().getComplexTimeEndParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransportType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0()); }
		('Bus')
		{ after(grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTransportTypeAccess().getTRAMEnumLiteralDeclaration_1()); }
		('Tram')
		{ after(grammarAccess.getTransportTypeAccess().getTRAMEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_2()); }
		('Metro')
		{ after(grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTransportTypeAccess().getTROLIEnumLiteralDeclaration_3()); }
		('Troli')
		{ after(grammarAccess.getTransportTypeAccess().getTROLIEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTransportTypeAccess().getHEVEnumLiteralDeclaration_4()); }
		('Hev')
		{ after(grammarAccess.getTransportTypeAccess().getHEVEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DayType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDayTypeAccess().getWEEKDAYSEnumLiteralDeclaration_0()); }
		('weekdays')
		{ after(grammarAccess.getDayTypeAccess().getWEEKDAYSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getWEEKENDSEnumLiteralDeclaration_1()); }
		('weekends')
		{ after(grammarAccess.getDayTypeAccess().getWEEKENDSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getMONDAYEnumLiteralDeclaration_2()); }
		('monday')
		{ after(grammarAccess.getDayTypeAccess().getMONDAYEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getTUESDAYEnumLiteralDeclaration_3()); }
		('tuesday')
		{ after(grammarAccess.getDayTypeAccess().getTUESDAYEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getWEDNESDAYEnumLiteralDeclaration_4()); }
		('wednesday')
		{ after(grammarAccess.getDayTypeAccess().getWEDNESDAYEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getTHURSDAYEnumLiteralDeclaration_5()); }
		('thursday')
		{ after(grammarAccess.getDayTypeAccess().getTHURSDAYEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getFRIDAYEnumLiteralDeclaration_6()); }
		('friday')
		{ after(grammarAccess.getDayTypeAccess().getFRIDAYEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getSATURDAYEnumLiteralDeclaration_7()); }
		('saturday')
		{ after(grammarAccess.getDayTypeAccess().getSATURDAYEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getDayTypeAccess().getSUNDAYEnumLiteralDeclaration_8()); }
		('sunday')
		{ after(grammarAccess.getDayTypeAccess().getSUNDAYEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStopsKeyword_0()); }
	'Stops'
	{ after(grammarAccess.getModelAccess().getStopsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStopsAssignment_1()); }
	(rule__Model__StopsAssignment_1)
	{ after(grammarAccess.getModelAccess().getStopsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_2()); }
	(rule__Model__Group_2__0)*
	{ after(grammarAccess.getModelAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSchedulesKeyword_3()); }
	'Schedules'
	{ after(grammarAccess.getModelAccess().getSchedulesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getSchedulesAssignment_4()); }
		(rule__Model__SchedulesAssignment_4)
		{ after(grammarAccess.getModelAccess().getSchedulesAssignment_4()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getSchedulesAssignment_4()); }
		(rule__Model__SchedulesAssignment_4)*
		{ after(grammarAccess.getModelAccess().getSchedulesAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_2__0__Impl
	rule__Model__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getModelAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStopsAssignment_2_1()); }
	(rule__Model__StopsAssignment_2_1)
	{ after(grammarAccess.getModelAccess().getStopsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__0__Impl
	rule__Schedule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getLineKeyword_0()); }
	'Line'
	{ after(grammarAccess.getScheduleAccess().getLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__1__Impl
	rule__Schedule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getLineNumberAssignment_1()); }
	(rule__Schedule__LineNumberAssignment_1)
	{ after(grammarAccess.getScheduleAccess().getLineNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__2__Impl
	rule__Schedule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getScheduleAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getScheduleAccess().getSchedulePartsAssignment_3()); }
		(rule__Schedule__SchedulePartsAssignment_3)
		{ after(grammarAccess.getScheduleAccess().getSchedulePartsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getScheduleAccess().getSchedulePartsAssignment_3()); }
		(rule__Schedule__SchedulePartsAssignment_3)*
		{ after(grammarAccess.getScheduleAccess().getSchedulePartsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LineNumber__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineNumber__Group__0__Impl
	rule__LineNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineNumberAccess().getTypeAssignment_0()); }
	(rule__LineNumber__TypeAssignment_0)
	{ after(grammarAccess.getLineNumberAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineNumber__Group__1__Impl
	rule__LineNumber__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineNumberAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getLineNumberAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineNumber__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineNumberAccess().getNumberAssignment_2()); }
	(rule__LineNumber__NumberAssignment_2)
	{ after(grammarAccess.getLineNumberAccess().getNumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeSchedule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSchedule__Group__0__Impl
	rule__RelativeSchedule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSchedule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeScheduleAccess().getStartAssignment_0()); }
	(rule__RelativeSchedule__StartAssignment_0)
	{ after(grammarAccess.getRelativeScheduleAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSchedule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSchedule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSchedule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRelativeScheduleAccess().getTargetsAssignment_1()); }
		(rule__RelativeSchedule__TargetsAssignment_1)
		{ after(grammarAccess.getRelativeScheduleAccess().getTargetsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getRelativeScheduleAccess().getTargetsAssignment_1()); }
		(rule__RelativeSchedule__TargetsAssignment_1)*
		{ after(grammarAccess.getRelativeScheduleAccess().getTargetsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeTarget__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeTarget__Group__0__Impl
	rule__RelativeTarget__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeTargetAccess().getHyphenMinusLeftSquareBracketKeyword_0()); }
	'-['
	{ after(grammarAccess.getRelativeTargetAccess().getHyphenMinusLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeTarget__Group__1__Impl
	rule__RelativeTarget__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeTargetAccess().getLengthAssignment_1()); }
	(rule__RelativeTarget__LengthAssignment_1)
	{ after(grammarAccess.getRelativeTargetAccess().getLengthAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeTarget__Group__2__Impl
	rule__RelativeTarget__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeTargetAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2()); }
	']->'
	{ after(grammarAccess.getRelativeTargetAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeTarget__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeTargetAccess().getTargetAssignment_3()); }
	(rule__RelativeTarget__TargetAssignment_3)
	{ after(grammarAccess.getRelativeTargetAccess().getTargetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteSchedule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbsoluteSchedule__Group__0__Impl
	rule__AbsoluteSchedule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsoluteScheduleAccess().getDaytypeAssignment_0()); }
	(rule__AbsoluteSchedule__DaytypeAssignment_0)
	{ after(grammarAccess.getAbsoluteScheduleAccess().getDaytypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbsoluteSchedule__Group__1__Impl
	rule__AbsoluteSchedule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_1()); }
	(rule__AbsoluteSchedule__DeparturesAssignment_1)
	{ after(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbsoluteSchedule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsoluteScheduleAccess().getGroup_2()); }
	(rule__AbsoluteSchedule__Group_2__0)*
	{ after(grammarAccess.getAbsoluteScheduleAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbsoluteSchedule__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbsoluteSchedule__Group_2__0__Impl
	rule__AbsoluteSchedule__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsoluteScheduleAccess().getAlternatives_2_0()); }
	(rule__AbsoluteSchedule__Alternatives_2_0)
	{ after(grammarAccess.getAbsoluteScheduleAccess().getAlternatives_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbsoluteSchedule__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_2_1()); }
	(rule__AbsoluteSchedule__DeparturesAssignment_2_1)
	{ after(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTimeMiddle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeMiddle__Group__0__Impl
	rule__ComplexTimeMiddle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeMiddleAccess().getFromAssignment_0()); }
	(rule__ComplexTimeMiddle__FromAssignment_0)
	{ after(grammarAccess.getComplexTimeMiddleAccess().getFromAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeMiddle__Group__1__Impl
	rule__ComplexTimeMiddle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeMiddleAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getComplexTimeMiddleAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeMiddle__Group__2__Impl
	rule__ComplexTimeMiddle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeMiddleAccess().getUntilAssignment_2()); }
	(rule__ComplexTimeMiddle__UntilAssignment_2)
	{ after(grammarAccess.getComplexTimeMiddleAccess().getUntilAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeMiddle__Group__3__Impl
	rule__ComplexTimeMiddle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeMiddleAccess().getSolidusKeyword_3()); }
	'/'
	{ after(grammarAccess.getComplexTimeMiddleAccess().getSolidusKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeMiddle__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeMiddleAccess().getFrequencyAssignment_4()); }
	(rule__ComplexTimeMiddle__FrequencyAssignment_4)
	{ after(grammarAccess.getComplexTimeMiddleAccess().getFrequencyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTimeEnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeEnd__Group__0__Impl
	rule__ComplexTimeEnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeEndAccess().getFromAssignment_0()); }
	(rule__ComplexTimeEnd__FromAssignment_0)
	{ after(grammarAccess.getComplexTimeEndAccess().getFromAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeEnd__Group__1__Impl
	rule__ComplexTimeEnd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_1()); }
	'/'
	{ after(grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeEnd__Group__2__Impl
	rule__ComplexTimeEnd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeEndAccess().getFrequencyAssignment_2()); }
	(rule__ComplexTimeEnd__FrequencyAssignment_2)
	{ after(grammarAccess.getComplexTimeEndAccess().getFrequencyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeEnd__Group__3__Impl
	rule__ComplexTimeEnd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_3()); }
	'/'
	{ after(grammarAccess.getComplexTimeEndAccess().getSolidusKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexTimeEnd__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexTimeEndAccess().getUntilAssignment_4()); }
	(rule__ComplexTimeEnd__UntilAssignment_4)
	{ after(grammarAccess.getComplexTimeEndAccess().getUntilAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StopsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStopsStopParserRuleCall_1_0()); }
		ruleStop
		{ after(grammarAccess.getModelAccess().getStopsStopParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StopsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStopsStopParserRuleCall_2_1_0()); }
		ruleStop
		{ after(grammarAccess.getModelAccess().getStopsStopParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SchedulesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSchedulesScheduleParserRuleCall_4_0()); }
		ruleSchedule
		{ after(grammarAccess.getModelAccess().getSchedulesScheduleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__LineNumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScheduleAccess().getLineNumberLineNumberParserRuleCall_1_0()); }
		ruleLineNumber
		{ after(grammarAccess.getScheduleAccess().getLineNumberLineNumberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__SchedulePartsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScheduleAccess().getSchedulePartsSchedulePartParserRuleCall_3_0()); }
		ruleSchedulePart
		{ after(grammarAccess.getScheduleAccess().getSchedulePartsSchedulePartParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineNumberAccess().getTypeTransportTypeEnumRuleCall_0_0()); }
		ruleTransportType
		{ after(grammarAccess.getLineNumberAccess().getTypeTransportTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineNumber__NumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineNumberAccess().getNumberAlternatives_2_0()); }
		(rule__LineNumber__NumberAlternatives_2_0)
		{ after(grammarAccess.getLineNumberAccess().getNumberAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSchedule__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeScheduleAccess().getStartStopCrossReference_0_0()); }
		(
			{ before(grammarAccess.getRelativeScheduleAccess().getStartStopSTRINGTerminalRuleCall_0_0_1()); }
			RULE_STRING
			{ after(grammarAccess.getRelativeScheduleAccess().getStartStopSTRINGTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getRelativeScheduleAccess().getStartStopCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSchedule__TargetsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeScheduleAccess().getTargetsRelativeTargetParserRuleCall_1_0()); }
		ruleRelativeTarget
		{ after(grammarAccess.getRelativeScheduleAccess().getTargetsRelativeTargetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__LengthAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeTargetAccess().getLengthINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getRelativeTargetAccess().getLengthINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeTarget__TargetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeTargetAccess().getTargetStopCrossReference_3_0()); }
		(
			{ before(grammarAccess.getRelativeTargetAccess().getTargetStopSTRINGTerminalRuleCall_3_0_1()); }
			RULE_STRING
			{ after(grammarAccess.getRelativeTargetAccess().getTargetStopSTRINGTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getRelativeTargetAccess().getTargetStopCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__DaytypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getDaytypeDayTypeEnumRuleCall_0_0()); }
		ruleDayType
		{ after(grammarAccess.getAbsoluteScheduleAccess().getDaytypeDayTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__DeparturesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_1_0()); }
		ruleDeparture
		{ after(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbsoluteSchedule__DeparturesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_2_1_0()); }
		ruleDeparture
		{ after(grammarAccess.getAbsoluteScheduleAccess().getDeparturesDepartureParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTimeFormat__FromAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTimeFormatAccess().getFromTIME_FORMATTerminalRuleCall_0()); }
		RULE_TIME_FORMAT
		{ after(grammarAccess.getSimpleTimeFormatAccess().getFromTIME_FORMATTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__FromAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeMiddleAccess().getFromTIME_FORMATTerminalRuleCall_0_0()); }
		RULE_TIME_FORMAT
		{ after(grammarAccess.getComplexTimeMiddleAccess().getFromTIME_FORMATTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__UntilAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeMiddleAccess().getUntilTIME_FORMATTerminalRuleCall_2_0()); }
		RULE_TIME_FORMAT
		{ after(grammarAccess.getComplexTimeMiddleAccess().getUntilTIME_FORMATTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeMiddle__FrequencyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeMiddleAccess().getFrequencyINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getComplexTimeMiddleAccess().getFrequencyINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__FromAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeEndAccess().getFromTIME_FORMATTerminalRuleCall_0_0()); }
		RULE_TIME_FORMAT
		{ after(grammarAccess.getComplexTimeEndAccess().getFromTIME_FORMATTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__FrequencyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeEndAccess().getFrequencyINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getComplexTimeEndAccess().getFrequencyINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTimeEnd__UntilAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexTimeEndAccess().getUntilTIME_FORMATTerminalRuleCall_4_0()); }
		RULE_TIME_FORMAT
		{ after(grammarAccess.getComplexTimeEndAccess().getUntilTIME_FORMATTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getNameSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStopAccess().getNameSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BKV_ID_LF : 'A'..'Z' RULE_INT ('A'..'Z')?;

RULE_BKV_ID_LB : ('A'..'Z')? RULE_INT 'A'..'Z';

fragment RULE_DUAL_INT_NOLEADZERO : RULE_DIGIT_ONE RULE_DIGIT?;

fragment RULE_DUAL_INT_LEADZERO : RULE_DIGIT RULE_DIGIT?;

fragment RULE_DIGIT : '0'..'9';

fragment RULE_DIGIT_ONE : '1'..'9';

RULE_TIME_FORMAT : RULE_DUAL_INT_NOLEADZERO ':' RULE_DUAL_INT_LEADZERO;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
