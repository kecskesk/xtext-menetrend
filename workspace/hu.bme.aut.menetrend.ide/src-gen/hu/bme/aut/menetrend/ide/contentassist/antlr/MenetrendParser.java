/*
 * generated by Xtext 2.10.0
 */
package hu.bme.aut.menetrend.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.aut.menetrend.ide.contentassist.antlr.internal.InternalMenetrendParser;
import hu.bme.aut.menetrend.services.MenetrendGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class MenetrendParser extends AbstractContentAssistParser {

	@Inject
	private MenetrendGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMenetrendParser createParser() {
		InternalMenetrendParser result = new InternalMenetrendParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLineNumberAccess().getNumberAlternatives_2_0(), "rule__LineNumber__NumberAlternatives_2_0");
					put(grammarAccess.getSchedulePartAccess().getAlternatives(), "rule__SchedulePart__Alternatives");
					put(grammarAccess.getAbsoluteScheduleAccess().getAlternatives_2_0(), "rule__AbsoluteSchedule__Alternatives_2_0");
					put(grammarAccess.getDepartureAccess().getAlternatives(), "rule__Departure__Alternatives");
					put(grammarAccess.getTransportTypeAccess().getAlternatives(), "rule__TransportType__Alternatives");
					put(grammarAccess.getDayTypeAccess().getAlternatives(), "rule__DayType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_2(), "rule__Model__Group_2__0");
					put(grammarAccess.getScheduleAccess().getGroup(), "rule__Schedule__Group__0");
					put(grammarAccess.getLineNumberAccess().getGroup(), "rule__LineNumber__Group__0");
					put(grammarAccess.getRelativeScheduleAccess().getGroup(), "rule__RelativeSchedule__Group__0");
					put(grammarAccess.getRelativeTargetAccess().getGroup(), "rule__RelativeTarget__Group__0");
					put(grammarAccess.getAbsoluteScheduleAccess().getGroup(), "rule__AbsoluteSchedule__Group__0");
					put(grammarAccess.getAbsoluteScheduleAccess().getGroup_2(), "rule__AbsoluteSchedule__Group_2__0");
					put(grammarAccess.getComplexTimeMiddleAccess().getGroup(), "rule__ComplexTimeMiddle__Group__0");
					put(grammarAccess.getComplexTimeEndAccess().getGroup(), "rule__ComplexTimeEnd__Group__0");
					put(grammarAccess.getModelAccess().getStopsAssignment_1(), "rule__Model__StopsAssignment_1");
					put(grammarAccess.getModelAccess().getStopsAssignment_2_1(), "rule__Model__StopsAssignment_2_1");
					put(grammarAccess.getModelAccess().getSchedulesAssignment_4(), "rule__Model__SchedulesAssignment_4");
					put(grammarAccess.getScheduleAccess().getLineNumberAssignment_1(), "rule__Schedule__LineNumberAssignment_1");
					put(grammarAccess.getScheduleAccess().getSchedulePartsAssignment_3(), "rule__Schedule__SchedulePartsAssignment_3");
					put(grammarAccess.getLineNumberAccess().getTypeAssignment_0(), "rule__LineNumber__TypeAssignment_0");
					put(grammarAccess.getLineNumberAccess().getNumberAssignment_2(), "rule__LineNumber__NumberAssignment_2");
					put(grammarAccess.getRelativeScheduleAccess().getStartAssignment_0(), "rule__RelativeSchedule__StartAssignment_0");
					put(grammarAccess.getRelativeScheduleAccess().getTargetsAssignment_1(), "rule__RelativeSchedule__TargetsAssignment_1");
					put(grammarAccess.getRelativeTargetAccess().getLengthAssignment_1(), "rule__RelativeTarget__LengthAssignment_1");
					put(grammarAccess.getRelativeTargetAccess().getTargetAssignment_3(), "rule__RelativeTarget__TargetAssignment_3");
					put(grammarAccess.getAbsoluteScheduleAccess().getDaytypeAssignment_0(), "rule__AbsoluteSchedule__DaytypeAssignment_0");
					put(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_1(), "rule__AbsoluteSchedule__DeparturesAssignment_1");
					put(grammarAccess.getAbsoluteScheduleAccess().getDeparturesAssignment_2_1(), "rule__AbsoluteSchedule__DeparturesAssignment_2_1");
					put(grammarAccess.getSimpleTimeFormatAccess().getFromAssignment(), "rule__SimpleTimeFormat__FromAssignment");
					put(grammarAccess.getComplexTimeMiddleAccess().getFromAssignment_0(), "rule__ComplexTimeMiddle__FromAssignment_0");
					put(grammarAccess.getComplexTimeMiddleAccess().getUntilAssignment_2(), "rule__ComplexTimeMiddle__UntilAssignment_2");
					put(grammarAccess.getComplexTimeMiddleAccess().getFrequencyAssignment_4(), "rule__ComplexTimeMiddle__FrequencyAssignment_4");
					put(grammarAccess.getComplexTimeEndAccess().getFromAssignment_0(), "rule__ComplexTimeEnd__FromAssignment_0");
					put(grammarAccess.getComplexTimeEndAccess().getFrequencyAssignment_2(), "rule__ComplexTimeEnd__FrequencyAssignment_2");
					put(grammarAccess.getComplexTimeEndAccess().getUntilAssignment_4(), "rule__ComplexTimeEnd__UntilAssignment_4");
					put(grammarAccess.getStopAccess().getNameAssignment(), "rule__Stop__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMenetrendParser typedParser = (InternalMenetrendParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MenetrendGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MenetrendGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
